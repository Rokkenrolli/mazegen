{"version":3,"sources":["serviceWorker.ts","generator.ts","render.ts","canvas.tsx","App.tsx","routing.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Direction","render","context","board","correctPath","path","draw","block","color","fillStyle","fillRect","pos","x","y","blockWidth","blockHeight","forEach","col","e","start","end","next","visited","topLeft","botLeft","topRight","botRight","drawLine","beginPath","moveTo","lineTo","strokeStyle","stroke","bottomWall","leftWall","rightWall","topWall","drawWalls","lines","pred","predPos","drawConnecting","arc","Math","abs","fill","generator","breakWall","dir","first","second","rowDif","row","colDif","Down","Up","Right","Left","determineDir","current","undefined","requestAnimationFrame","step","length","neighbors","all","push","rows","cols","filter","neighbours","floor","random","pop","clearRect","width","height","innerWidth","innerHeight","Canvas","canvasRef","useRef","cPath","showPath","getContext","generateCorrectPath","alert","initalize","temp","useEffect","className","onClick","generate","setLines","ref","App","Home","ReactDOM","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fcc104a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Block } from \"./render\"\nimport {  rows, cols, height, width } from \"./canvas\"\nimport render from \"./render\"\n\n\nenum Direction {\n    Up = 1,\n    Down,\n    Left,\n    Right,\n}\n\n\n\nconst generator = (context:CanvasRenderingContext2D, board:Block[][], correctPath: Block[]) => {\n    const path:Block[]  = [board[0][0]]\n    \n    \nconst neighbours = (block:Block) => {\n    const row = block.row\n    const col = block.col\n    let all:Block[] = []\n    if (row > 0 ) all.push(board[col][row -1])\n    if (col > 0 ) all.push(board[col -1][row])\n    if (row < rows -1) all.push(board[col][row +1])\n    if (col < cols -1) all.push(board[col+1][row])\n    if (all.length === 0) return []\n    else {\n        const filtered = all.filter(x=>!x.visited)\n        return filtered\n    }\n}    \n\n\n//returns dir which is needed to break the wall\n//determines the direction from first block to second\nconst determineDir = (first:Block, second:Block) => {\n    \n    const rowDif = first.row - second.row\n    const colDif = first.col - second.col\n\n    if (rowDif < 0)  return Direction.Down \n    if (rowDif > 0)  return Direction.Up\n    if (colDif < 0)  return Direction.Right\n    if (colDif > 0)  return Direction.Left\n\n   \n}\n\n\n\n\nconst breakWall = (start: Block,end:Block) => {\n\n    const dir = determineDir(start,end)\n    if (dir === Direction.Up) {\n        start.topWall = false\n        end.bottomWall = false\n    }\n\n    if (dir === Direction.Down) {\n        start.bottomWall = false\n        end.topWall      = false \n    }\n\n    if (dir === Direction.Left) {\n        start.leftWall = false\n        end.rightWall = false\n    }\n\n    if (dir === Direction.Right) {\n        start.rightWall = false\n        end.leftWall = false\n    }\n    \n}\n\n  \n  let current:Block | undefined = board[0][0]\n  let next:Block | undefined  = undefined\n  const step = () => { \n\n  if (path.length) {\n    window.requestAnimationFrame(step)\n    if (!current) return\n    current.next = false\n    current.visited = true\n    const neighbors = neighbours(current)\n    if (neighbors.length) {\n        next= neighbors[Math.floor(Math.random()*neighbors.length)];\n        next.pred = current\n        next.next = true\n         breakWall(current,next)\n         path.push(current = next)\n    }\n\n    else {\n            current = path.pop()\n    }\n\n  }\n  context.clearRect(0,0,width,height)\n  render(context,board,correctPath)\n  }\n  \nwindow.requestAnimationFrame(step)\n}\n\nexport default generator","import {lines,blockHeight,blockWidth, path} from \"./canvas\"\n\n\nexport type Coord = {\n    x: number\n    y: number\n}\n\nexport type Block = {\n    leftWall:boolean\n    topWall: boolean\n    rightWall:boolean\n    bottomWall:boolean\n    pos: Coord\n    visited:boolean\n    row:number\n    col:number\n    next: boolean\n    pred: Block | undefined\n    start:boolean\n    end:boolean\n}\n\n\n\nconst render = (context:CanvasRenderingContext2D, board: Block[][], correctPath:Block[]) => {\n  \n    \n    const draw = (block:Block, color:string) => {\n        \n        context.fillStyle= color\n        context.fillRect(block.pos.x,block.pos.y,blockWidth,blockHeight)\n        \n    }\n    \n    \n\n    const drawWalls = (block:Block) => {\n\n        const topLeft  = {x:block.pos.x, y:block.pos.y}\n        const botLeft  = {x:block.pos.x, y:block.pos.y + blockHeight}\n        const topRight = {x:block.pos.x + blockWidth, y:block.pos.y}\n        const botRight = {x:block.pos.x + blockWidth, y:block.pos.y + blockHeight}\n        \n\n        const drawLine = (start:Coord,end:Coord) => {\n            context.beginPath()\n            context.moveTo(start.x,start.y)\n            context.lineTo(end.x,end.y)\n            context.strokeStyle = \"black\"\n            context.stroke()\n        }\n        \n        if (block.bottomWall) drawLine(botLeft, botRight)\n        if (block.leftWall)   drawLine(topLeft, botLeft)\n        if (block.rightWall)  drawLine(topRight,botRight)\n        if (block.topWall)    drawLine(topLeft, topRight)\n       \n    }\n\n    const drawCorrectPath = (path: Block[]) => {\n        context.fillStyle = \"purple\"\n        path.forEach(x => {\n            context.beginPath()\n            context.arc(x.pos.x + blockWidth / 2,x.pos.y + blockHeight / 2, Math.abs(blockHeight - blockWidth) * 2,0,360)\n            context.fill()\n            context.stroke()\n        })\n    }\n\n    const drawConnecting = (block: Block) => {\n        const pos:Coord = {x: block.pos.x + blockWidth / 2, y:block.pos.y+blockHeight /2}\n        if (block.pred) {\n            const predPos:Coord = {x:block.pred.pos.x + blockWidth /2, y:block.pred.pos.y + blockHeight / 2}\n            context.beginPath()\n            context.strokeStyle = \"green\"\n            context.moveTo(pos.x,pos.y)\n            context.lineTo(predPos.x,predPos.y)\n            context.stroke()\n        }\n    }\n\n\n    board.forEach(col => col.forEach(e =>{\n        if(e.start || e.end) draw(e,\"orange\")\n        else if (e.next) draw(e,\"blue\")\n        else if(e.visited) draw(e,\"white\")\n        else draw(e,\"#b678bd\") \n        drawWalls(e)\n        if (lines) drawConnecting(e)\n        \n    } ) )\n    if (path)  drawCorrectPath(correctPath)\n}\n\nexport default render","import React, { useRef,useEffect} from 'react'\nimport './App.css'\nimport render, { Block } from './render';\nimport generator from './generator';\n\n\nexport const width  = window.innerWidth * 0.8\nexport const height = window.innerHeight * 0.8 \nexport const rows   = 30\nexport const cols   = 60\nexport const blockWidth =  width / cols\nexport const blockHeight = height / rows\nexport let lines = false\nexport let path  = false \n\nconst Canvas  = () => {\n\n    \n    const canvasRef = useRef<HTMLCanvasElement>(null); \n    let cPath:Block[] = []    \n    let board: Block[][] = []\n    const generate = () => {\n      if (!canvasRef.current) return\n      const context = canvasRef.current.getContext(\"2d\")\n      if(!context) return\n        initalize(context)\n        generator(context,board,cPath)\n      }\n    \n      const solve = () => {\n        alert(\"not implemented\")\n      }\n\n      const generateCorrectPath = () => {\n        if (!canvasRef.current) return\n        const context = canvasRef.current.getContext(\"2d\")\n        if(!context) return\n        cPath = []\n        let current = board[cols -1][rows -1]\n        while(current.pred) {\n            cPath.push(current)\n            current = current.pred\n        }\n        cPath.push(board[0][0])\n       render(context,board,cPath)\n    }\n\n\n      const setLines = () => {\n        if (!canvasRef.current) return\n       const context = canvasRef.current.getContext(\"2d\")\n       if(!context) return\n       lines = !lines\n       render(context,board,cPath)\n      }\n\n      const showPath = () => {\n        if (!board[cols-1][rows -1].visited) {\n          alert(\"Maze not finished yet\")\n          return;\n        }\n        else {     \n          path = !path\n          generateCorrectPath()\n     \n        }\n        \n      }\n\n      const initalize = ( context:CanvasRenderingContext2D ) => {\n\n        board = []\n        context.clearRect(0,0,width,height)\n\n        for (let col= 0; col < cols; col++) {\n            const temp:Block[] =[]\n            for (let row = 0; row < rows; row++)\n            temp.push({\n                leftWall: true,\n                topWall:true,\n                rightWall:true,\n                bottomWall:true,\n                pos:{x:col * blockWidth, y:row*blockHeight},\n                visited:false,\n                row: row,\n                col: col,\n                next:false,\n                pred: undefined,\n                start:false,\n                end: false\n            })\n            board.push(temp)\n\n        }\n         const start =board[0][0]\n         start.start = true\n         start.topWall = false\n         start.visited = true\n         board[cols -1][rows -1].end = true\n         board[cols -1][rows -1].bottomWall = false\n        render(context,board,cPath)\n      }\n\n      useEffect(() => {\n        if (!canvasRef.current) return\n        const context = canvasRef.current.getContext(\"2d\")\n        if(!context) return\n        initalize(context)\n      })\n    \n\n    return (\n    <div className=\"canvasContainer\">\n         <div className =\"buttons\" >\n            <button className= \"generator\" onClick = {() => generate()}>Generate Maze</button>\n            <button className= \"solver\"    onClick = {() => solve()}>Solve maze</button>\n            <button className= \"lines\"     onClick = {() => setLines()}>Show lines</button>\n            <button className= \"path\"      onClick = {() => showPath()}>Show correct path</button>\n         </div>   \n         <div>\n            <canvas ref={canvasRef} className=\"canvas\" width ={width} height={height} />\n         </div>\n     \n    </div>\n        \n    )\n}\n\nexport default Canvas","import React from 'react';\nimport './App.css';\nimport Canvas from './canvas';\n\nconst App: React.FC = () => {\n\n \n\n  return (\n    <div className=\"container\">\n   <div>\n     <h1 className=\"header\">Maze Generator</h1>\n   </div >\n    <Canvas />\n   </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\nexport default function Routing () {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/Mazegen\">Maze generator</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/Mazegen\">\r\n            <App />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst Home = () => {\r\n    return(<h2>Home</h2>)\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routing from './routing';\n\nReactDOM.render(<Routing />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}