{"version":3,"sources":["generator.ts","render.ts","canvas.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Direction","render","context","board","correctPath","path","draw","block","color","fillStyle","fillRect","pos","x","y","blockWidth","blockHeight","drawConnecting","pred","predPos","beginPath","strokeStyle","moveTo","lineTo","stroke","forEach","col","e","start","end","next","visited","topLeft","botLeft","topRight","botRight","drawLine","bottomWall","leftWall","rightWall","topWall","drawWalls","lines","arc","fill","generator","breakWall","dir","first","second","rowDif","row","colDif","Down","Up","Right","Left","determineDir","current","undefined","window","requestAnimationFrame","step","length","neighbors","all","push","rows","cols","filter","neighbours","Math","floor","random","pop","clearRect","width","height","innerWidth","innerHeight","Canvas","canvasRef","useRef","cPath","showPath","getContext","generateCorrectPath","alert","initalize","temp","useEffect","className","onClick","generate","disabled","setLines","ref","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19ccb0f6.chunk.js","sourcesContent":["import { Block } from \"./render\"\r\nimport {  rows, cols, height, width } from \"./canvas\"\r\nimport render from \"./render\"\r\n\r\n\r\nenum Direction {\r\n    Up = 1,\r\n    Down,\r\n    Left,\r\n    Right,\r\n}\r\n\r\n\r\n\r\nconst generator = (context:CanvasRenderingContext2D, board:Block[][], correctPath: Block[]) => {\r\n    const path:Block[]  = [board[0][0]]\r\n    \r\n    \r\nconst neighbours = (block:Block) => {\r\n    const row = block.row\r\n    const col = block.col\r\n    let all:Block[] = []\r\n    if (row > 0 ) all.push(board[col][row -1])\r\n    if (col > 0 ) all.push(board[col -1][row])\r\n    if (row < rows -1) all.push(board[col][row +1])\r\n    if (col < cols -1) all.push(board[col+1][row])\r\n    if (all.length === 0) return []\r\n    else {\r\n        const filtered = all.filter(x=>!x.visited)\r\n        return filtered\r\n    }\r\n}    \r\n\r\n\r\n//returns dir which is needed to break the wall\r\n//determines the direction from first block to second\r\nconst determineDir = (first:Block, second:Block) => {\r\n    \r\n    const rowDif = first.row - second.row\r\n    const colDif = first.col - second.col\r\n\r\n    if (rowDif < 0)  return Direction.Down \r\n    if (rowDif > 0)  return Direction.Up\r\n    if (colDif < 0)  return Direction.Right\r\n    if (colDif > 0)  return Direction.Left\r\n\r\n   \r\n}\r\n\r\n\r\n\r\n\r\nconst breakWall = (start: Block,end:Block) => {\r\n\r\n    const dir = determineDir(start,end)\r\n    if (dir === Direction.Up) {\r\n        start.topWall = false\r\n        end.bottomWall = false\r\n    }\r\n\r\n    if (dir === Direction.Down) {\r\n        start.bottomWall = false\r\n        end.topWall      = false \r\n    }\r\n\r\n    if (dir === Direction.Left) {\r\n        start.leftWall = false\r\n        end.rightWall = false\r\n    }\r\n\r\n    if (dir === Direction.Right) {\r\n        start.rightWall = false\r\n        end.leftWall = false\r\n    }\r\n    \r\n}\r\n\r\n  \r\n  let current:Block | undefined = board[0][0]\r\n  let next:Block | undefined  = undefined\r\n  const step = () => { \r\n\r\n  if (path.length) {\r\n    window.requestAnimationFrame(step)\r\n    if (!current) return\r\n    current.next = false\r\n    current.visited = true\r\n    const neighbors = neighbours(current)\r\n    if (neighbors.length) {\r\n        next= neighbors[Math.floor(Math.random()*neighbors.length)];\r\n        next.pred = current\r\n        next.next = true\r\n         breakWall(current,next)\r\n         path.push(current = next)\r\n    }\r\n\r\n    else {\r\n            current = path.pop()\r\n    }\r\n\r\n  }\r\n  context.clearRect(0,0,width,height)\r\n  render(context,board,correctPath)\r\n  }\r\n  \r\nwindow.requestAnimationFrame(step)\r\n}\r\n\r\nexport default generator","import {lines,blockHeight,blockWidth, path} from \"./canvas\"\r\n\r\n\r\nexport type Coord = {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport type Block = {\r\n    leftWall:boolean\r\n    topWall: boolean\r\n    rightWall:boolean\r\n    bottomWall:boolean\r\n    pos: Coord\r\n    visited:boolean\r\n    row:number\r\n    col:number\r\n    next: boolean\r\n    pred: Block | undefined\r\n    start:boolean\r\n    end:boolean\r\n}\r\n\r\n\r\n\r\nconst render = (context:CanvasRenderingContext2D, board: Block[][], correctPath:Block[]) => {\r\n  \r\n    \r\n    const draw = (block:Block, color:string) => {\r\n        \r\n        context.fillStyle= color\r\n        context.fillRect(block.pos.x,block.pos.y,blockWidth,blockHeight)\r\n        \r\n    }\r\n    \r\n    \r\n\r\n    const drawWalls = (block:Block) => {\r\n\r\n        const topLeft  = {x:block.pos.x, y:block.pos.y}\r\n        const botLeft  = {x:block.pos.x, y:block.pos.y + blockHeight}\r\n        const topRight = {x:block.pos.x + blockWidth, y:block.pos.y}\r\n        const botRight = {x:block.pos.x + blockWidth, y:block.pos.y + blockHeight}\r\n        \r\n\r\n        const drawLine = (start:Coord,end:Coord) => {\r\n            context.beginPath()\r\n            context.moveTo(start.x,start.y)\r\n            context.lineTo(end.x,end.y)\r\n            context.strokeStyle = \"black\"\r\n            context.stroke()\r\n        }\r\n        \r\n        if (block.bottomWall) drawLine(botLeft, botRight)\r\n        if (block.leftWall)   drawLine(topLeft, botLeft)\r\n        if (block.rightWall)  drawLine(topRight,botRight)\r\n        if (block.topWall)    drawLine(topLeft, topRight)\r\n       \r\n    }\r\n\r\n    const drawCorrectPath = (path: Block[]) => {\r\n        context.fillStyle = \"purple\"\r\n        path.forEach(x => {\r\n            context.beginPath()\r\n            context.arc(x.pos.x + blockWidth / 2,x.pos.y + blockHeight / 2, blockWidth / 8,0,360)\r\n            context.fill()\r\n            context.stroke()\r\n        })\r\n        path.forEach(e =>drawConnecting(e))\r\n    }\r\n\r\n    const drawConnecting = (block: Block) => {\r\n        const pos:Coord = {x: block.pos.x + blockWidth / 2, y:block.pos.y+blockHeight /2}\r\n        if (block.pred) {\r\n            const predPos:Coord = {x:block.pred.pos.x + blockWidth /2, y:block.pred.pos.y + blockHeight / 2}\r\n            context.beginPath()\r\n            context.strokeStyle = \"green\"\r\n            context.moveTo(pos.x,pos.y)\r\n            context.lineTo(predPos.x,predPos.y)\r\n            context.stroke()\r\n        }\r\n    }\r\n\r\n\r\n    board.forEach(col => col.forEach(e =>{\r\n        if(e.start || e.end) draw(e,\"orange\")\r\n        else if (e.next) draw(e,\"blue\")\r\n        else if(e.visited) draw(e,\"white\")\r\n        else draw(e,\"#b678bd\") \r\n        drawWalls(e)\r\n        if (lines) drawConnecting(e)\r\n        \r\n    } ) )\r\n    if (path)  drawCorrectPath(correctPath)\r\n}\r\n\r\nexport default render","import React, { useRef,useEffect} from 'react'\r\nimport './App.css'\r\nimport render, { Block } from './render';\r\nimport generator from './generator';\r\n\r\n\r\nexport const width  = window.innerWidth * 0.8\r\nexport const height = window.innerHeight * 0.8 \r\nexport const rows   = 20\r\nexport const cols   = 40\r\nexport const blockWidth =  width / cols\r\nexport const blockHeight = height / rows\r\nexport let lines = false\r\nexport let path  = false \r\n\r\nconst Canvas  = () => {\r\n\r\n    \r\n    const canvasRef = useRef<HTMLCanvasElement>(null); \r\n    let cPath:Block[] = []    \r\n    let board: Block[][] = []\r\n    let generating: boolean = false;\r\n    const generate = () => {\r\n      if (!canvasRef.current) return\r\n      const context = canvasRef.current.getContext(\"2d\")\r\n      if(!context) return\r\n      if (generating) {\r\n        alert(\"Maze is being generated\")\r\n        return;\r\n      }\r\n        initalize(context)\r\n        generator(context,board,cPath)\r\n      }\r\n    \r\n      const solve = () => {\r\n        alert(\"not implemented\")\r\n      }\r\n\r\n      const generateCorrectPath = () => {\r\n        if (!canvasRef.current) return\r\n        const context = canvasRef.current.getContext(\"2d\")\r\n        if(!context) return\r\n        cPath = []\r\n        let current = board[cols -1][rows -1]\r\n        while(current.pred) {\r\n            cPath.push(current)\r\n            current = current.pred\r\n        }\r\n        cPath.push(board[0][0])\r\n       render(context,board,cPath)\r\n    }\r\n\r\n\r\n      const setLines = () => {\r\n        if (!canvasRef.current) return\r\n       const context = canvasRef.current.getContext(\"2d\")\r\n       if(!context) return\r\n       lines = !lines\r\n       render(context,board,cPath)\r\n      }\r\n\r\n      const showPath = () => {\r\n        if (!board[cols-1][rows -1].visited) {\r\n          alert(\"Maze not finished yet\")\r\n          return;\r\n        }\r\n        else {     \r\n          path = !path\r\n          generateCorrectPath()\r\n     \r\n        }\r\n        \r\n      }\r\n\r\n      const initalize = ( context:CanvasRenderingContext2D ) => {\r\n\r\n        board = []\r\n        context.clearRect(0,0,width,height)\r\n\r\n        for (let col= 0; col < cols; col++) {\r\n            const temp:Block[] =[]\r\n            for (let row = 0; row < rows; row++)\r\n            temp.push({\r\n                leftWall: true,\r\n                topWall:true,\r\n                rightWall:true,\r\n                bottomWall:true,\r\n                pos:{x:col * blockWidth, y:row*blockHeight},\r\n                visited:false,\r\n                row: row,\r\n                col: col,\r\n                next:false,\r\n                pred: undefined,\r\n                start:false,\r\n                end: false\r\n            })\r\n            board.push(temp)\r\n\r\n        }\r\n         const start =board[0][0]\r\n         start.start = true\r\n         start.topWall = false\r\n         start.visited = true\r\n         board[cols -1][rows -1].end = true\r\n         board[cols -1][rows -1].bottomWall = false\r\n        render(context,board,cPath)\r\n      }\r\n\r\n      useEffect(() => {\r\n        if (!canvasRef.current) return\r\n        const context = canvasRef.current.getContext(\"2d\")\r\n        if(!context) return\r\n        initalize(context)\r\n      })\r\n    \r\n\r\n    return (\r\n    <div className=\"canvasContainer\">\r\n         <div className =\"buttons\" >\r\n            <button className= \"generator\" onClick = {() => generate()}>Generate Maze</button>\r\n            <button className= \"solver\" disabled    onClick = {() => solve()}>Solve maze</button>\r\n            <button className= \"lines\"     onClick = {() => setLines()}>Show lines</button>\r\n            <button className= \"path\"      onClick = {() => showPath()}>Show correct path</button>\r\n         </div>   \r\n         <div>\r\n            <canvas ref={canvasRef} className=\"canvas\" width ={width} height={height} />\r\n         </div>\r\n     \r\n    </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Canvas","import React from 'react';\r\nimport './App.css';\r\nimport Canvas from './canvas';\r\n\r\nconst App: React.FC = () => {\r\n\r\n \r\n\r\n  return (\r\n    <div className=\"container\">\r\n   <div>\r\n     <h1 className=\"header\">Maze Generator</h1>\r\n   </div >\r\n    <Canvas />\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}