{"version":3,"sources":["generator.ts","render.ts","canvas.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Direction","render","context","board","forEach","col","e","block","start","end","fillStyle","next","visited","fillRect","pos","x","y","blockWidth","blockHeight","topLeft","botLeft","topRight","botRight","drawLine","beginPath","moveTo","lineTo","strokeStyle","stroke","bottomWall","leftWall","rightWall","topWall","drawWalls","lines","pred","predPos","drawConnecting","generator","path","breakWall","dir","first","second","rowDif","row","colDif","Down","Up","Right","Left","determineDir","current","undefined","window","requestAnimationFrame","step","length","neighbors","all","push","rows","cols","filter","neighbours","Math","floor","random","pop","clearRect","width","height","innerWidth","innerHeight","Canvas","canvasRef","useRef","initalize","temp","useEffect","getContext","className","onClick","generate","alert","setLines","ref","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00773f7d.chunk.js","sourcesContent":["import { Block } from \"./render\"\nimport {  rows, cols, height, width } from \"./canvas\"\nimport render from \"./render\"\n\n\nenum Direction {\n    Up = 1,\n    Down,\n    Left,\n    Right,\n}\n\n\n\nconst generator = (context:CanvasRenderingContext2D, board:Block[][]) => {\n    const path:Block[]    = [board[0][0]]\n    \n\n\nconst neighbours = (block:Block) => {\n    const row = block.row\n    const col = block.col\n    let all:Block[] = []\n    if (row > 0 ) all.push(board[col][row -1])\n    if (col > 0 ) all.push(board[col -1][row])\n    if (row < rows -1) all.push(board[col][row +1])\n    if (col < cols -1) all.push(board[col+1][row])\n    if (all.length === 0) return []\n    else {\n        const filtered = all.filter(x=>!x.visited)\n        return filtered\n    }\n}    \n\n\n//returns dir which is needed to break the wall\n//determines the direction from first block to second\nconst determineDir = (first:Block, second:Block) => {\n    \n    const rowDif = first.row - second.row\n    const colDif = first.col - second.col\n\n    if (rowDif < 0)  return Direction.Down \n    if (rowDif > 0)  return Direction.Up\n    if (colDif < 0)  return Direction.Right\n    if (colDif > 0)  return Direction.Left\n\n   \n}\n\n\nconst breakWall = (start: Block,end:Block) => {\n\n    const dir = determineDir(start,end)\n    if (dir === Direction.Up) {\n        start.topWall = false\n        end.bottomWall = false\n    }\n\n    if (dir === Direction.Down) {\n        start.bottomWall = false\n        end.topWall      = false \n    }\n\n    if (dir === Direction.Left) {\n        start.leftWall = false\n        end.rightWall = false\n    }\n\n    if (dir === Direction.Right) {\n        start.rightWall = false\n        end.leftWall = false\n    }\n    \n}\n\n  \n  let current:Block | undefined = board[0][0]\n  let next:Block | undefined  = undefined\n  const step = () => { \n\n  if (path.length) {\n    window.requestAnimationFrame(step)\n    if (!current) return\n    current.next = false\n    current.visited = true\n    const neighbors = neighbours(current)\n    if (neighbors.length) {\n        next= neighbors[Math.floor(Math.random()*neighbors.length)];\n        next.pred = current\n        next.next = true\n         breakWall(current,next)\n         path.push(current = next)\n    }\n\n    else {\n            current = path.pop()\n    }\n\n  }\n  context.clearRect(0,0,width,height)\n  render(context,board)\n  }\n  \nwindow.requestAnimationFrame(step)\n}\n\nexport default generator","import {lines,blockHeight,blockWidth} from \"./canvas\"\n\n\nexport type Coord = {\n    x: number\n    y: number\n}\n\nexport type Block = {\n    leftWall:boolean\n    topWall: boolean\n    rightWall:boolean\n    bottomWall:boolean\n    pos: Coord\n    visited:boolean\n    row:number\n    col:number\n    next: boolean\n    pred: Block | undefined\n    start:boolean\n    end:boolean\n}\n\n\n\nconst render = (context:CanvasRenderingContext2D, board: Block[][]) => {\n    \n    \n    const draw = (block:Block) => {\n        if(block.start || block.end) context.fillStyle = \"orange\"\n        else if (block.next) context.fillStyle = \"blue\"\n        else if (block.visited) context.fillStyle= \"white\"\n        else context.fillStyle=\"#b678bd\"\n        context.fillRect(block.pos.x,block.pos.y,blockWidth,blockHeight)\n        \n    }\n    \n    const drawWalls = (block:Block) => {\n\n        const topLeft  = {x:block.pos.x, y:block.pos.y}\n        const botLeft  = {x:block.pos.x, y:block.pos.y + blockHeight}\n        const topRight = {x:block.pos.x + blockWidth, y:block.pos.y}\n        const botRight = {x:block.pos.x + blockWidth, y:block.pos.y + blockHeight}\n        \n\n        const drawLine = (start:Coord,end:Coord) => {\n            context.beginPath()\n            context.moveTo(start.x,start.y)\n            context.lineTo(end.x,end.y)\n            context.strokeStyle = \"black\"\n            context.stroke()\n        }\n        \n        if (block.bottomWall) drawLine(botLeft, botRight)\n        if (block.leftWall)   drawLine(topLeft, botLeft)\n        if (block.rightWall)  drawLine(topRight,botRight)\n        if (block.topWall)    drawLine(topLeft, topRight)\n       \n    }\n\n    const drawConnecting = (block: Block) => {\n        const pos:Coord = {x: block.pos.x + blockWidth / 2, y:block.pos.y+blockHeight /2}\n        if (block.pred) {\n            const predPos:Coord = {x:block.pred.pos.x + blockWidth /2, y:block.pred.pos.y + blockHeight / 2}\n            context.beginPath()\n            context.strokeStyle = \"green\"\n            context.moveTo(pos.x,pos.y)\n            context.lineTo(predPos.x,predPos.y)\n            context.stroke()\n        }\n    }\n\n\n    board.forEach(col => col.forEach(e =>{\n        draw(e) \n        drawWalls(e)\n        if (lines) drawConnecting(e)\n    } ) )\n    //context.fillStyle = \"red\"\n    //context.fillRect(0,0,blockWidth,blockHeight)\n}\n\nexport default render","import React, { useRef,useEffect} from 'react'\nimport './App.css'\nimport render, { Block } from './render';\nimport generator from './generator';\n\n\nexport const width  = window.innerWidth * 0.8\nexport const height = window.innerHeight * 0.8 \nexport const rows   = 30\nexport const cols   = 60\nexport const blockWidth =  width / cols\nexport const blockHeight = height / rows\nexport let lines = false\n\nconst Canvas  = () => {\n\n    \n    const canvasRef = useRef<HTMLCanvasElement>(null); \n    \n    let board: Block[][] = []\n    const generate = () => {\n      if (!canvasRef.current) return\n      const context = canvasRef.current.getContext(\"2d\")\n      if(!context) return\n        initalize(context)\n        generator(context,board)\n      }\n    \n      const solve = () => {\n        alert(\"not implemented\")\n      }\n\n      const setLines = () => {\n        if (!canvasRef.current) return\n       const context = canvasRef.current.getContext(\"2d\")\n       if(!context) return\n       lines = !lines\n       render(context,board)\n      }\n\n      const initalize = ( context:CanvasRenderingContext2D ) => {\n\n        board = []\n        context.clearRect(0,0,width,height)\n\n        for (let col= 0; col < cols; col++) {\n            const temp:Block[] =[]\n            for (let row = 0; row < rows; row++)\n            temp.push({\n                leftWall: true,\n                topWall:true,\n                rightWall:true,\n                bottomWall:true,\n                pos:{x:col * blockWidth, y:row*blockHeight},\n                visited:false,\n                row: row,\n                col: col,\n                next:false,\n                pred: undefined,\n                start:false,\n                end: false\n            })\n            board.push(temp)\n\n        }\n         const start =board[0][0]\n         start.start = true\n         start.topWall = false\n         start.visited = true\n         board[cols -1][rows -1].end = true\n         board[cols -1][rows -1].bottomWall = false\n        render(context,board)\n      }\n\n      useEffect(() => {\n        if (!canvasRef.current) return\n        const context = canvasRef.current.getContext(\"2d\")\n        if(!context) return\n        initalize(context)\n      })\n    \n\n    return (\n    <div className=\"canvasContainer\">\n         <div className =\"buttons\" >\n            <button className= \"generator\" onClick={() => generate()}>Generate Maze</button>\n            <button className= \"solver\" onClick={() =>solve()}>Solve maze</button>\n            <button className= \"lines\" onClick = {() =>setLines()}>{\"show lines\"}</button>\n         </div>   \n         <div>\n            <canvas ref={canvasRef} className=\"canvas\" width ={width} height={height} />\n         </div>\n     \n    </div>\n        \n    )\n}\n\nexport default Canvas","import React from 'react';\nimport './App.css';\nimport Canvas from './canvas';\n\nconst App: React.FC = () => {\n\n \n\n  return (\n    <div className=\"container\">\n   <div>\n     <h1 className=\"header\">Maze Generator</h1>\n   </div >\n    <Canvas />\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}